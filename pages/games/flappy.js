// pages/games/flappy.js

import { useEffect, useState } from "react";
import { useAccount, useChainId } from "wagmi";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { writeScoreToChain } from "../../lib/contract"; // –≤–∞—à ethers.js wrapper

const HEMI_MAINNET_CHAIN_ID = 43111;

export default function FlappyPage({ initialLeaders, fetchError }) {
  const [leaders, setLeaders] = useState(initialLeaders || []);
  const [errorLeaders, setErrorLeaders] = useState(fetchError);
  const [modalOpen, setModalOpen] = useState(false);

  const { address, isConnected } = useAccount();
  const chainId = useChainId();

  useEffect(() => {
    // 1) Unity –≤—ã–∑–æ–≤–µ—Ç —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è
    window.onFlappyGameOver = async (score, /*time*/) => {
      console.log("üî• GameOver callback:", score);

      // 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª—ë–∫
      if (!isConnected || chainId !== HEMI_MAINNET_CHAIN_ID) {
        setErrorLeaders("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ Hemi Mainnet");
        return;
      }

      try {
        // 3) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–∞–ª)
        if (window.ethereum) {
          await window.ethereum.request({ method: "eth_requestAccounts" });
        }

        // 4) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç (—Ç–æ–ª—å–∫–æ score)
        await writeScoreToChain(score);

        // 5) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase
        const res = await fetch("/api/leaderboard/flappy", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            wallet_address: address,
            username: address,
            score,
          }),
        });
        console.log("‚Üí Supabase POST status:", res.status);
        const json = await res.json();
        if (!res.ok) throw new Error(json.error || res.statusText);

        // 6) –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–ø-10
        setLeaders((prev) =>
          [json, ...prev].sort((a, b) => b.score - a.score).slice(0, 10)
        );
      } catch (err) {
        console.error("Error on GameOver flow:", err);
        setErrorLeaders(
          err.message.includes("User rejected")
            ? "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        );
      }
    };

    // 7) –ø–æ–¥–≥—Ä—É–∂–∞–µ–º Unity WebGL loader
    const script = document.createElement("script");
    script.src = "/flappy/Build/flappy.loader.js";
    script.onload = () => {
      const canvas = document.getElementById("unity-canvas");
      if (!canvas) {
        console.error("Canvas #unity-canvas –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      if (typeof createUnityInstance !== "function") {
        console.error("createUnityInstance() –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      createUnityInstance(canvas, {
        dataUrl: "/flappy/Build/flappy.data",
        frameworkUrl: "/flappy/Build/flappy.framework.js",
        codeUrl: "/flappy/Build/flappy.wasm",
        streamingAssetsUrl: "StreamingAssets",
      });
    };
    script.onerror = () => console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å flappy.loader.js");
    document.body.appendChild(script);

    // 8) –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      document.body.removeChild(script);
      delete window.onFlappyGameOver;
      // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∞–º <canvas>, —á—Ç–æ–±—ã Unity –Ω–µ —Ä—É–≥–∞–ª–∞—Å—å
    };
  }, [address, chainId, isConnected]);

  // –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞: –ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
  const anonymize = (addr) =>
    addr ? `${addr.slice(0, 3)}‚Ä¶${addr.slice(-5)}` : "‚Äî";

  return (
    <div
      style={{
        position: "relative",
        width: "100vw",
        height: "100vh",
        background: "#000",
        margin: 0,
        padding: 0,
      }}
    >
      {/* 1) –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ */}
      <div style={{ position: "fixed", top: 16, left: 16, zIndex: 1000 }}>
        <ConnectButton showBalance={false} />
      </div>

      {/* 2) –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –ª–∏–¥–µ—Ä–æ–≤ */}
      <button
        onClick={() => setModalOpen(true)}
        style={{
          position: "fixed",
          top: 16,
          right: 16,
          width: 40,
          height: 40,
          borderRadius: "50%",
          background: "#222",
          color: "#fff",
          fontSize: 24,
          cursor: "pointer",
          zIndex: 1000,
        }}
      >
        üèÜ
      </button>

      {/* 3) Unity Canvas */}
      <canvas
        id="unity-canvas"
        width="1920"
        height="1080"
        style={{ width: "100%", height: "100%" }}
      />

      {/* 4) –ú–æ–¥–∞–ª–∫–∞ —Å —Ç–æ–ø-10 */}
      {modalOpen && (
        <div
          onClick={() => setModalOpen(false)}
          style={{
            position: "fixed",
            inset: 0,
            background: "rgba(0,0,0,0.75)",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            zIndex: 999,
          }}
        >
          <div
            onClick={(e) => e.stopPropagation()}
            style={{
              width: "80vw",
              maxWidth: 400,
              background: "#111",
              borderRadius: 8,
              padding: 16,
              color: "#fff",
              position: "relative",
            }}
          >
            <button
              onClick={() => setModalOpen(false)}
              style={{
                position: "absolute",
                top: 8,
                right: 8,
                background: "none",
                border: "none",
                color: "#fff",
                fontSize: 20,
                cursor: "pointer",
              }}
            >
              √ó
            </button>

            <h2 style={{ margin: 0, marginBottom: 12 }}>üèÜ –¢–æ–ø-10 Flappy</h2>
            {errorLeaders ? (
              <p style={{ color: "tomato" }}>{errorLeaders}</p>
            ) : (
              <ol style={{ padding: 0, margin: 0 }}>
                {leaders.map((r) => (
                  <li key={r.id} style={{ marginBottom: 8 }}>
                    <strong>{anonymize(r.username)}</strong> ‚Äî {r.score} pts
                  </li>
                ))}
              </ol>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export async function getServerSideProps() {
  const { createClient } = await import("@supabase/supabase-js");
  const supabaseAdmin = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  const { data, error } = await supabaseAdmin
    .from("leaderboard_flappy")
    .select("id, wallet_address, username, score, created_at")
    .order("score", { ascending: false })
    .limit(10);

  return {
    props: {
      initialLeaders: error ? [] : data,
      fetchError: error ? "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å leaderboard" : null,
    },
  };
}
